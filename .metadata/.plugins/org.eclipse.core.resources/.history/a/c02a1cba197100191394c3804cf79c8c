import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import java.util.Scanner;

public class Connect4 extends JFrame {

	private Connect4Board playBoard;
	private ScoreBoard scoreBoard;
	private Player playerNum1;
	private Player playerNum2;
	private Player currentPlayer;
	
	private ImageIcon ironMan;
	private ImageIcon alien;

	
	public static final int EMPTY = 0;
	private String p1;
	private String p2;

	
	
	private int row;
	private int col;
	private int connectFour;
	private int p3;
	private int p4;
	
	

	
	public Connect4() {
		JFrame frame = new JFrame();
		frame.setLayout(new BorderLayout());
		frame.setVisible(true);
		frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
		
			try{
				ironMan = new ImageIcon(ImageIO.read(getClass().getResource("img/ironman.jpg"))
					.getScaledInstance(60, 60, Image.SCALE_DEFAULT));
			
				alien = new ImageIcon(ImageIO.read(getClass().getResource("img/alien.jpg"))
					.getScaledInstance(60, 60, Image.SCALE_DEFAULT));
		} catch (Exception e) {
			
		}
			
		do {
			
			Component outOfBounds = null;
			p1 = JOptionPane.showInputDialog(null, "Enter Player 1's Name: ");
			p2 = JOptionPane.showInputDialog(null, "Enter Player 2's Name: ");
			
			
			connectFour = Integer.parseInt(JOptionPane.showInputDialog(null,
				"Connect X (Connect? Select a number from 1-7)"));
			p3 = Integer.parseInt( JOptionPane.showInputDialog(null,
					"how many rows"));
			p4 = Integer.parseInt( JOptionPane.showInputDialog(null,
					"how many columns"));
			
			}
		while (connectFour <= 0 || connectFour > 7 & p3<=10 || p4 > 15);
		
  
		
		this.playerNum1 = new Player(p1, ironMan);
		this.playerNum2 = new Player(p2, alien);
		this.currentPlayer = this.playerNum1;
		
		setLayout(new BorderLayout());
		
		playBoard = new Connect4Board();
		add(playBoard, BorderLayout.CENTER);
		
		scoreBoard = new ScoreBoard();
		add(scoreBoard, BorderLayout.SOUTH);
		
		setSize(600, 600);
		setVisible(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	
	private class Connect4Board extends JPanel implements ActionListener {
		private JButton[][] board;
		private int rowTile = 6;
		private int colTile = 7;
		int[][] grid = new int[rowTile][colTile];
		private int turnCount;

		public Connect4Board() {
			
			setLayout(new GridLayout(6, 7));
			displayBoard();
			
		}
		
		public void displayBoard() {
			this.board = new JButton[rowTile][colTile];
			
			for ( int row = 0 ; row < this.board.length ; row++ ) {
				for ( int col = 0 ; col < this.board[row].length ; col++ ) {
					
					this.board[row][col] = new JButton();
					this.board[row][col].addActionListener(this);
					add(this.board[row][col]); 
				}
			}
		}
				
		public void clearBoard() {
			for ( int row = 0 ; row < this.board.length ; row++ ) {
				for ( int col = 0 ; col < this.board[row].length ; col++ ) {
					this.board[row][col].setText("");
					this.board[row][col].setIcon(null);
					
				}
			}
		}

		
		public void switchCurrentPlayer() {
			if (currentPlayer.equals(playerNum1)) {
				currentPlayer = playerNum2;
			} else {
				currentPlayer = playerNum1;
			}
			if (currentPlayer.equals(playerNum1)) {
				scoreBoard.setCurrentPlayerName(currentPlayer);
			} else {
				scoreBoard.setCurrentPlayerName(currentPlayer);
			}
			
			
		
			
			
		}
		
		
	
		
		public Player determineTurn() {
	        if (this.turnCount % 2 == 0) {
	            return playerNum1;
	            
	            
	        } 
	        else {
	            return playerNum1;
	            
	        }
	    }
		
		public boolean isWinner(ImageIcon imageIcon) {
			determineTurn();
			int foundCount = 0;
			
			
			for ( int row = 0 ; row < this.board.length ; row++ ) {
				foundCount = 0;
				for ( int col = 0 ; col < this.board[row].length ; col++ ) {
					ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
					if (imageIcon.equals(buttonText)) {
						foundCount++;
						if (foundCount == connectFour) {
							return true;
						}
					} else {
						break;
					}
				}
			}
			
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 1 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check rows
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 2 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check rows
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 3 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check rows
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 4 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check rows
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 5 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check rows
						for ( int row = 0 ; row < this.board.length ; row++ ) {
							foundCount = 0;
							for ( int col = 6 ; col < this.board[row].length ; col++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						
			// check columns
			for ( int col = 0 ; col < this.board[0].length ; col++ ) {
				foundCount = 0;
				for ( int row = 0 ; row < this.board.length ; row++ ) {
					ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
					if (imageIcon.equals(buttonText)) {
						foundCount++;
						//System.out.println("Column 1: " + foundCount + "tiles");
						if (foundCount == connectFour) {
							return true;
						}
					} else {
						break;
					}
				}
			}
			// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 1 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 2 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 3 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 4 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 5 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 6 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
						// check columns
						for ( int col = 0 ; col < this.board[0].length ; col++ ) {
							foundCount = 0;
							for ( int row = 7 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									//System.out.println("Column 1: " + foundCount + "tiles");
									if (foundCount == connectFour) {
										return true;
									}
								} else {
									break;
								}
							}
						}
			
				/*	for(int j = 0; j<connect_-1; j++) {
							foundCount = 0;
							for ( int row = 0 ; row < this.board.length ; row++ ) {
								ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connect_) {
										return true;
									}
								} else {
									break;
								}
							}*/
							
			//check  diagonal
					if(connectFour == 6) {
						for (int i = 0; i<2; i++) {
						
						foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
							
							
							for (int i = 0; i<2; i++) {
						foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
					}
					
					for (int i = 0; i<1; i++) {
				foundCount = 0;
					int row = 0;
					int col = 0;
					while (row < this.board.length-1 && col < this.board.length) {
						ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
						if (imageIcon.equals(buttonText)) {
							foundCount++;
							if (foundCount == connectFour) {
								return true;
							}
							row++;
							col++;
						} else {
							break;
						}
					}
				}
			
					
					if (connectFour == 5) {	
						
						for (int i = 0; i<3; i++) {
							foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
						
						
						for (int i = 0; i<3; i++) {
							foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
						
						
							for (int i = 0; i<3; i++) {
								foundCount = 0;
								int row = 0;
								int col = 0;
								while (row < this.board.length-1 && col < this.board.length) {
									ImageIcon buttonText = (ImageIcon) this.board[row+i][col+2].getIcon();
									if (imageIcon.equals(buttonText)) {
										foundCount++;
										if (foundCount == connectFour) {
											return true;
										}
										row++;
										col++;
									} else {
										break;
									}
								}
							}
					}
					
						if (connectFour == 4) {	
						
							for (int i = 0; i<connectFour; i++) {
								foundCount = 0;
								int row = 0;
								int col = 0;
								while (row < this.board.length-1 && col < this.board.length) {
									ImageIcon buttonText = (ImageIcon) this.board[row+i][col].getIcon();
									if (imageIcon.equals(buttonText)) {
										foundCount++;
										if (foundCount == connectFour) {
											return true;
										}
										row++;
										col++;
									} else {
										break;
									}
								}
							}
							
				
				for (int i = 0; i<7-connectFour; i++) {
								foundCount = 0;
								int row = 0;
								int col = 0;
								while (row < this.board.length-1 && col < this.board.length) {
									ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
									if (imageIcon.equals(buttonText)) {
										foundCount++;
										if (foundCount == connectFour) {
											return true;
										}
										row++;
										col++;
									} else {
										break;
									}
								}
							}
							
				
				for (int i = 0; i<7-connectFour; i++) {
									foundCount = 0;
									int row = 0;
									int col = 0;
									while (row < this.board.length-1 && col < this.board.length) {
										ImageIcon buttonText = (ImageIcon) this.board[row+i][col+2].getIcon();
										if (imageIcon.equals(buttonText)) {
											foundCount++;
											if (foundCount == connectFour) {
												return true;
											}
											row++;
											col++;
										} else {
											break;
										}
									}
								}
								
				
				for (int i = 0; i<7-connectFour; i++) {
								foundCount = 0;
								int row = 0;
								int col = 0;
								while (row < this.board.length-1 && col < this.board.length) {
									ImageIcon buttonText = (ImageIcon) this.board[row+i][col+3].getIcon();
									if (imageIcon.equals(buttonText)) {
										foundCount++;
										if (foundCount == connectFour) {
											return true;
										}
										row++;
										col++;
									} else {
										break;
									}
								}
							}
						}
						
				if (connectFour == 3) {	
							//col 1-3
								for (int i = 0; i<8-connectFour; i++) {
									foundCount = 0;
									int row = 0;
									int col = 0;
									while (row < this.board.length-1 && col < this.board.length) {
										ImageIcon buttonText = (ImageIcon) this.board[row+i][col].getIcon();
										if (imageIcon.equals(buttonText)) {
											foundCount++;
											if (foundCount == connectFour) {
												return true;
											}
											row++;
											col++;
										} else {
											break;
										}
									}
								}
								
					//col 2-4
					for (int i = 0; i<8-connectFour; i++) {
									foundCount = 0;
									int row = 0;
									int col = 0;
									while (row < this.board.length-1 && col < this.board.length) {
										ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
										if (imageIcon.equals(buttonText)) {
											foundCount++;
											if (foundCount == connectFour) {
												return true;
											}
											row++;
											col++;
										} else {
											break;
										}
									}
								}
								
					//col 3-5
					for (int i = 0; i<8-connectFour; i++) {
										foundCount = 0;
										int row = 0;
										int col = 0;
										while (row < this.board.length-1 && col < this.board.length) {
											ImageIcon buttonText = (ImageIcon) this.board[row+i][col+2].getIcon();
											if (imageIcon.equals(buttonText)) {
												foundCount++;
												if (foundCount == connectFour) {
													return true;
												}
												row++;
												col++;
											} else {
												break;
											}
										}
									}
									
					//col 4-6
					for (int i = 0; i<8-connectFour; i++) {
									foundCount = 0;
									int row = 0;
									int col = 0;
									while (row < this.board.length-1 && col < this.board.length) {
										ImageIcon buttonText = (ImageIcon) this.board[row+i][col+3].getIcon();
										if (imageIcon.equals(buttonText)) {
											foundCount++;
											if (foundCount == connectFour) {
												return true;
											}
											row++;
											col++;
										} else {
											break;
										}
									}
								}
					
					//col 5-7
					for (int i = 0; i<8-connectFour; i++) {
						foundCount = 0;
						int row = 0;
						int col = 0;
						while (row < this.board.length-1 && col < this.board.length) {
							ImageIcon buttonText = (ImageIcon) this.board[row+i][col+4].getIcon();
							if (imageIcon.equals(buttonText)) {
								foundCount++;
								if (foundCount == connectFour) {
									return true;
								}
								row++;
								col++;
							} else {
								break;
							}
						}
					}
				}
				
				if (connectFour== 2) {	
					//col 1-2
						for (int i = 0; i<8-connectFour; i++) {
							foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
						
			//col 2-3
			for (int i = 0; i<8-connectFour; i++) {
							foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col+1].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
						
			//col 3-4
			for (int i = 0; i<8-connectFour; i++) {
								foundCount = 0;
								int row = 0;
								int col = 0;
								while (row < this.board.length-1 && col < this.board.length) {
									ImageIcon buttonText = (ImageIcon) this.board[row+i][col+2].getIcon();
									if (imageIcon.equals(buttonText)) {
										foundCount++;
										if (foundCount == connectFour) {
											return true;
										}
										row++;
										col++;
									} else {
										break;
									}
								}
							}
							
			//col 4-5
			for (int i = 0; i<8-connectFour; i++) {
							foundCount = 0;
							int row = 0;
							int col = 0;
							while (row < this.board.length-1 && col < this.board.length) {
								ImageIcon buttonText = (ImageIcon) this.board[row+i][col+3].getIcon();
								if (imageIcon.equals(buttonText)) {
									foundCount++;
									if (foundCount == connectFour) {
										return true;
									}
									row++;
									col++;
								} else {
									break;
								}
							}
						}
			
			//col 5-6
			for (int i = 0; i<8-connectFour; i++) {
				foundCount = 0;
				int row = 0;
				int col = 0;
				while (row < this.board.length-1 && col < this.board.length) {
					ImageIcon buttonText = (ImageIcon) this.board[row+i][col+4].getIcon();
					if (imageIcon.equals(buttonText)) {
						foundCount++;
						if (foundCount == connectFour) {
							return true;
						}
						row++;
						col++;
					} else {
						break;
					}
				}
			}
			
			//col 6-7
			for (int i = 0; i<8-connectFour; i++) {
				foundCount = 0;
				int row = 0;
				int col = 0;
				while (row < this.board.length-1 && col < this.board.length) {
					ImageIcon buttonText = (ImageIcon) this.board[row+i][col+5].getIcon();
					if (imageIcon.equals(buttonText)) {
						foundCount++;
						if (foundCount == connectFour) {
							return true;
						}
						row++;
						col++;
					} else {
						break;
					}
				}
			}
		}
						
						
						//check reverse diagonal (positive slope)
			//for (int j = 0; j<7; j++) {
				for (int i = 0; i<connectFour; i++) {
					foundCount = 0;
					int row = this.board.length - 1;
					int col = 0;
					while (row >= 0 && col < this.board.length) {
						ImageIcon buttonText = (ImageIcon) this.board[row-i][col].getIcon();
						if (imageIcon.equals(buttonText)) {
							foundCount++;
							if (foundCount == connectFour) {
								return true;
							}
							row--;
							col++;
						} else {
							break;
						}
					}
				}
				
				for (int i = 0; i<connectFour; i++) {
					foundCount = 0;
					int row = this.board.length - 1;
					int col = 0;
					while (row >= 0 && col < this.board.length) {
						ImageIcon buttonText = (ImageIcon) this.board[row-i][col+1].getIcon();
						if (imageIcon.equals(buttonText)) {
							foundCount++;
							if (foundCount == connectFour) {
								return true;
							}
							row--;
							col++;
						} else {
							break;
						}
					}
				}
				
				for (int i = 0; i<connectFour; i++) {
					foundCount = 0;
					int row = this.board.length - 1;
					int col = 0;
					while (row >= 0 && col < this.board.length) {
						ImageIcon buttonText = (ImageIcon) this.board[row-i][col+2].getIcon();
						if (imageIcon.equals(buttonText)) {
							foundCount++;
							if (foundCount == connectFour) {
								return true;
							}
							row--;
							col++;
						} else {
							break;
						}
					}
				}
				
				for (int i = 0; i<connectFour; i++) {
					foundCount = 0;
					int row = this.board.length - 1;
					int col = 0;
					while (row >= 0 && col < this.board.length) {
						ImageIcon buttonText = (ImageIcon) this.board[row-i][col+3].getIcon();
						if (imageIcon.equals(buttonText)) {
							foundCount++;
							if (foundCount == connectFour) {
								return true;
							}
							row--;
							col++;
						} else {
							break;
						}
					}
				}
			
			
			return false;
		}
		
		
		public void displayWinner() {
			currentPlayer.addNumWins();
			int numWins = currentPlayer.getNumWins();
			
			if (currentPlayer.equals(playerNum1)) { 
				scoreBoard.setPlayer1Score(numWins);
			} else {
				scoreBoard.setPlayer2Score(numWins);
			}
			
			scoreBoard.setLastWinnerName(currentPlayer.getPlayerName());
			
			if (playerNum1.compareTo(playerNum2) > 0) {
				scoreBoard.setChampName(playerNum1.getPlayerName());
			} else if (playerNum2.compareTo(playerNum1) > 0) {
				scoreBoard.setChampName(playerNum2.getPlayerName());
			} else {
				scoreBoard.setChampName("----------");
			}
			
		}
		
		
		public void promptPlayAgain() {
		 	int yesno = JOptionPane.showConfirmDialog(null, "Play Again?", "Yes or No", JOptionPane.YES_NO_OPTION);
			 	if (yesno == JOptionPane.YES_OPTION) {
				 	clearBoard();
			 	} else {
			 		System.exit(EXIT_ON_CLOSE);
		 	}
		}

		// checks if board is full
		public boolean boardIsFull() {
			for ( int row = 0 ; row < this.board.length ; row++ ) {
				for ( int col = 0 ; col < this.board[row].length ; col++ ) {
					ImageIcon buttonText = (ImageIcon) this.board[row][col].getIcon();
					if (buttonText == null) {
						return false;
					}
				}
			}
			return true;
		}
		
		//find the column that the mouse has clicked
		public int findColumn (JButton b){
			for (row = 0; row < this.board.length; row++){
				for(col = 0; col < this.board[row].length; col++){
					//System.out.print(this.board.length + this.board[row].length);
					//b = this.board[row][col];
					if (this.board[row][col].equals(b)){
						return col;
						//findOpenRow(row, col, e);
					}
				}
			}
			return -1;
		}
		
		public int findBottomEmptyRow (int col){
			//goes from bottom row to top row
			for (int row = rowTile-1; row >= 0; row--){
				if(board[row][col].getIcon() == null){
					return row;
				}
			}
			return -1;
		}
		
		// row on the bottom of the column
		public int findOpenRow (int col, int row, ActionEvent e){
			JButton clickedButton = (JButton) e.getSource();
			for (row = rowTile-1; row > 0; row--){
				if (row == EMPTY){
					
					clickedButton.setEnabled(true);
					
				}
			}
			return col;
		}
		
	    @Override
		public void actionPerformed(ActionEvent e) {
			
	    	JButton clickedButton = (JButton) e.getSource();
	    	
			col = findColumn(clickedButton);
			row = findBottomEmptyRow(col);

			this.board[row][col].setIcon(currentPlayer.getPlayerSymbol());
			
		
			
			int click = 0;
			String btn = e.getActionCommand();
			System.out.println(btn);

	
			if(clickedButton.getModel().isPressed())
			 {
				
			    
				for (col = 0; col < this.board.length-1; col++){
					if (clickedButton != this.board[6][col]){
						for (row = 0; row < this.board.length-1; row--){
							
							if (row == EMPTY){
								
								clickedButton = this.board[row][col];
							
							}
							
							
							
						}
					}
				
				
					
				}
			 }

			 
			
			if (isWinner(currentPlayer.getPlayerSymbol())) {
				JOptionPane.showMessageDialog(null, "Winner Is " + currentPlayer.getPlayerName());
				displayWinner();
				promptPlayAgain();
			}
			
			if (boardIsFull()) {
				JOptionPane.showMessageDialog(null, "Game Is A Draw");
				promptPlayAgain();
			}
			
			switchCurrentPlayer();
			
		}
		
	}
	
	
	private class ScoreBoard extends JPanel {
		
		private JPanel genScoreInfo;
		private JLabel labelForChamp, champName , labelCurrentPlayer,CurrentPlayerName;
		private JLabel labelForLastWinner, lastWinnerName;
		
		
		private JPanel playScoreInfo;
		private JLabel labelPlaceHolder, labelForPlayer1Name, labelForPlayer2Name;
		private JLabel labelForPlayerNames, player1Name, player2Name;
		

		private JLabel labelForPlayerScore, player1Score, player2Score;
		
		
		public ScoreBoard() {
			setLayout(new BorderLayout());
			genScoreInfo = new JPanel(new GridLayout(3, 2));
			genScoreInfo.setBackground(Color.BLUE);
			
			playScoreInfo = new JPanel(new GridLayout(3, 3));
			playScoreInfo.setBackground(Color.RED);
			
			labelForChamp = new JLabel("Champion");
			champName = new JLabel("----------");
			
			labelForLastWinner = new JLabel("Last Winner");
			lastWinnerName = new JLabel("----------");
			labelCurrentPlayer = new JLabel("CurrentPlayer:");
			CurrentPlayerName = new JLabel( "---------");
	         
			
			JLabel[] genLabels = {labelForChamp, champName, 
									labelForLastWinner,labelCurrentPlayer, lastWinnerName,CurrentPlayerName };
			
			for ( int i = 0 ; i < genLabels.length ; i++ ) {
				genLabels[i].setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
				genScoreInfo.add(genLabels[i]);
			}
			
			
			labelPlaceHolder = new JLabel("          ");
			labelForPlayer1Name = new JLabel("Player 1");
			labelForPlayer2Name = new JLabel("Player 2");
			
			labelForPlayerNames = new JLabel("Name");
			player1Name = new JLabel(playerNum1.getPlayerName());
			player2Name = new JLabel(playerNum2.getPlayerName());
			
			labelForPlayerScore = new JLabel("Score");
			player1Score = new JLabel("----------");
			player2Score = new JLabel("----------");

			JLabel[] playLabels = {labelPlaceHolder, labelForPlayer1Name, labelForPlayer2Name,
									labelForPlayerNames, player1Name, player2Name,
									labelForPlayerScore, player1Score, player2Score};
			
			for ( int i = 0 ; i < playLabels.length ; i++ ) {
				playLabels[i].setFont(new Font(Font.SANS_SERIF, Font.ITALIC, 12));
				playScoreInfo.add(playLabels[i]);
			}
			
			add(playScoreInfo, BorderLayout.CENTER);
			add(genScoreInfo, BorderLayout.NORTH);
			
		}
		
		
		public void setCurrentPlayerName(Player currentPlayer) {
			this.CurrentPlayerName.setText(String.valueOf(currentPlayer).substring(22,30));	
		}


		private void setChampName(String champName) {
			this.champName.setText(champName);
		}
		
		
		
		 


		private void setLastWinnerName(String lastWinnerName) {
			this.lastWinnerName.setText(lastWinnerName);
		}

		private void setPlayer1Score(int score) {
			this.player1Score.setText(""+score);
		}

		private void setPlayer2Score(int score) {
			this.player2Score.setText(""+score);
		}
		
	}
	
}
